{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/data.service.ts","webpack:///src/app/gaurd/auth.guard.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/model/user.model.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DashboardComponent","loginService","cookieService","router","dataService","user","loginerror","get","userType","getAllClientList","subscribe","response","userList","client","getUserListByClient","editUser","sharedData","edit","navigate","index","userId","deleteClientUser","result","data","splice","deleteUser","deleteAll","DataService","name","isEedit","providedIn","AuthGuard","route","state","currentUser","queryParams","returnUrl","url","LoginComponent","loginForm","userName","required","maxLength","minLength","password","value","clientSignIn","set","domainName","event","keyCode","preventDefault","document","getElementById","click","loginEnter","userLogin","User","RegisterComponent","registationForm","email","pattern","disable","setValue","saveClient","saveUser","cancel","httpOptions","headers","UserService","http","formgroup","post","put","environment","production","apiUrl","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthGuard } from './gaurd/auth.guard';\n\n\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent, canActivate: [AuthGuard] },\n  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n\n\n\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ui';\n\n\n\n  constructor() {\n  }\n\n\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { RegisterComponent } from './register/register.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CookieService } from 'ngx-cookie-service';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    NoopAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule\n  ],\n  providers: [CookieService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { User } from '../model/user.model';\nimport { Response } from '../model/response.module';\nimport { CookieService } from 'ngx-cookie-service';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor(private loginService: UserService, private cookieService: CookieService,\n              private router: Router, private dataService: DataService) { }\n\n  user = new User();\n  loginerror = false;\n  userType: boolean;\n  userList: User[];\n  userId: any;\n\n  ngOnInit(): void {\n    if (this.cookieService.get('userType') === 'admin') {\n      this.userType = true;\n      this.loginService.getAllClientList().subscribe((response: any) => {\n        if (response != null) {\n          this.userList = response;\n        } else {\n          this.loginerror = true;\n        }\n      });\n    } else {\n      if (this.cookieService.get('domainName') != null) {\n        this.user.client = this.cookieService.get('domainName');\n        this.loginService.getUserListByClient(this.user).subscribe((response: any) => {\n          if (response != null) {\n            this.userList = response;\n          } else {\n            this.loginerror = true;\n          }\n        });\n      }\n    }\n  }\n\n  resetPassword(editUser: User) {\n    this.dataService.sharedData = editUser;\n    this.dataService.edit = true;\n    this.router.navigate(['/register']);\n  }\n\n  deleteUser(index: number) {\n    this.userId = this.userList[index].id;\n    if (this.cookieService.get('userType') === 'admin') {\n      this.loginService.deleteClientUser(this.userId).subscribe((response: Response) => {\n        if (response != null && response.result === 'success') {\n          const data = this.userList;\n          data.splice(index, 1);\n          this.userList = data;\n        }\n      });\n    } else {\n      this.loginService.deleteUser(this.userId).subscribe((response: Response) => {\n        if (response != null && response.result === 'success') {\n          const data = this.userList;\n          data.splice(index, 1);\n          this.userList = data;\n        }\n      });\n    }\n  }\n\n  logout() {\n    this.cookieService.deleteAll();\n    this.router.navigate(['/login']);\n  }\n\n}\n","<nav class=\"navbar navbar-expand navbar-light bg-light\" *ngIf=\"user\">\n  <div class=\"navbar-nav\">\n    <a class=\"nav-item nav-link\" routerLink=\"/dashboard\">\n      <img src=\"../../assets/images/logo.png\" alt=\"\">\n    </a>\n\n  </div>\n  <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n    <ul class=\"nav navbar-nav ml-auto\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-item nav-link ml-auto logout\" (click)=\"logout()\">Logout</a>\n      </li>\n\n    </ul>\n  </div>\n</nav>\n\n\n<div class=\"container\">\n  <div>\n    <div class=\"row\">\n      <div class=\"col-9\">\n        <h1 *ngIf=\"userType\">Client List</h1>\n        <h1 *ngIf=\"!userType\">User List</h1>\n      </div>\n      <div class=\"col-3 float-right\">\n        <button type=\"button\" class=\"btn btn-dark\" routerLink=\"/register\" *ngIf=\"userType\">Add New Client</button>\n        <button type=\"button\" class=\"btn btn-dark\" routerLink=\"/register\" *ngIf=\"!userType\">Add New User</button>\n      </div>\n    </div>\n    <table class=\"table table-hover\">\n      <thead class=\"thead-dark\">\n        <tr>\n          <th>Id</th>\n          <th>User Name</th>\n          <th>Email</th>\n          <th>Domain Name</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let item of userList; let i = index\">\n          <th>{{ i+1 }}</th>\n          <td>{{ item.userName }}</td>\n          <td>{{ item.email }}</td>\n          <td>{{ item.domainName}}</td>\n          <td>\n            <button type=\"button\" class=\"btn btn-dark mr-2\" (click)=resetPassword(item)>Edit</button>\n            <button type=\"button\" class=\"btn btn-dark mr-2\" (click)=deleteUser(i);>Delete</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n\n</div>\n","import { Injectable, Input } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n@Injectable()\nexport class DataService {\n\n  constructor() { }\n\n  private data = '';\n\n  @Input()\n  set sharedData(name: any) {\n    this.data = name;\n  }\n\n  get sharedData(): any { return this.data; }\n\n\n  private isEedit: any;\n\n  @Input()\n  set edit(name: boolean) {\n    this.isEedit = name;\n  }\n\n  get edit(): boolean { return this.isEedit; }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router, private cookieService: CookieService) { }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const currentUser = this.cookieService.get('domainName');\r\n    if (currentUser) {\r\n      // logged in so return true\r\n      return true;\r\n    }\r\n    // not logged in so redirect to login page with the return url\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Response } from '../model/response.module';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { UserService } from '../user.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\n\nexport class LoginComponent implements OnInit {\n\n  constructor(private loginService: UserService, private route: ActivatedRoute, private cookieService: CookieService,\n              private router: Router) { }\n\n  loginerror: boolean;\n  loginForm: FormGroup;\n  userType: string;\n\n  ngOnInit() {\n    this.loginerror = false;\n    this.loginForm = new FormGroup({\n      userName: new FormControl('', [\n        Validators.required,\n        Validators.maxLength(20),\n        Validators.minLength(3)\n        // Validators.pattern(\"[a-zA-Z ]*\")\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(6),\n      ])\n\n    })\n  }\n\n  get userName() { return this.loginForm.get('userName'); }\n\n  get password() { return this.loginForm.get('password'); }\n\n\n\n  userLogin() {\n    this.userType = this.loginForm.get('userName').value === 'admin' ? 'admin' : 'client';\n    this.loginService.clientSignIn(this.loginForm)\n      .subscribe((response: Response) => {\n        if (response != null && response.result == 'success') {\n          this.cookieService.set('domainName', response.domainName);\n          this.cookieService.set('userType', this.userType);\n          this.loginerror = false;\n          this.router.navigate(['/dashboard']);\n        } else {\n          this.loginerror = true;\n        }\n      }\n      );\n  }\n\n  loginEnter(event: any) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      document.getElementById('loginId').click();\n    }\n  }\n}\n","<div class=\"container py-5\">\n\n  <div class=\"row\">\n    <div class=\"col-md-10 mx-auto\">\n      <form class=\"\" [formGroup]=\"loginForm\">\n        <div class=\"form-group row\">\n          <img src=\"../../assets/images/logo.png\" alt=\"\">\n        </div>\n        <div class=\"col-6 alert alert-danger mb-3\" *ngIf=\"loginerror\">\n          Username or password is incorrect\n        </div>\n        <div class=\"form-group row\">\n          <div class=\"col-6\">\n            <label class=\"lb-lg text-dark\">User Name</label>\n            <input type=\"text\" class=\"form-control\" id=\"inputFirstname\" placeholder=\"User Name\"\n              formControlName=\"userName\" required>\n          </div>\n          <div class=\"col-4\">\n            <div *ngIf=\" userName.invalid && (userName.dirty || userName.touched)\" class=\"alert alert-danger mt-4\">\n              <span *ngIf=\"userName.errors.required\">\n                Name is required.\n              </span>\n              <span *ngIf=\"userName.errors.minlength\">\n                Name must be at least 3 characters long.\n              </span>\n              <span *ngIf=\"userName.errors.maxlength\">\n                Name must be at least 20 characters long.\n              </span>\n              <!-- <span *ngIf=\"userName.errors.pattern\">\n                Name should not contains number.\n              </span> -->\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <div class=\"col-6\">\n            <label class=\"lb-lg text-dark\">Password</label>\n            <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\"\n              formControlName=\"password\" (keyup.enter)=\"loginEnter($event)\" required>\n          </div>\n          <div class=\"col-4\">\n            <div *ngIf=\" password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger mt-4\">\n              <div *ngIf=\"password.errors.required\">\n                Password is required.\n              </div>\n              <div *ngIf=\"password.errors.minlength\">\n                Password must be at least 6 characters long.\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <div class=\"col-3\">\n            <button type=\"button\" id=\"loginId\" class=\"btn btn-dark btn-block\" (click)=userLogin()\n              [disabled]=\"loginForm.invalid\">Login</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n","export class User {\n  id: number;\n  userName: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  domainName: string;\n  phone: number;\n  password: string;\n  client: string;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UserService } from '../user.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { User } from '../model/user.model';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor(private loginService: UserService, private route: ActivatedRoute, private cookieService: CookieService,\n              private router: Router, private dataService: DataService) { }\n\n  get userName() { return this.registationForm.get('userName'); }\n  get password() { return this.registationForm.get('password'); }\n  get email() { return this.registationForm.get('email'); }\n  get domainName() { return this.registationForm.get('domainName'); }\n\n  registationForm: FormGroup;\n  user = new User();\n  userType = false;\n  loginerror = false;\n\n  ngOnInit(): void {\n    if (this.cookieService.get('domainName') != null) {\n      this.user.client = this.cookieService.get('domainName');\n    }\n    if (this.cookieService.get('userType') === 'admin') {\n      this.userType = true;\n    }\n    this.registationForm = new FormGroup({\n      userName: new FormControl('', [\n        Validators.required,\n        Validators.maxLength(20),\n        Validators.minLength(3),\n        // Validators.pattern(\"[a-zA-Z ]*\")\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(6),\n      ]),\n      email: new FormControl('', [\n        Validators.required,\n        Validators.email,\n        Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')\n      ]),\n      domainName: new FormControl('', [\n        Validators.required,\n      ]),\n    });\n\n    if (!this.userType) {\n      this.registationForm.get('domainName').disable();\n    }\n\n    if (this.dataService.edit) {\n      this.registationForm.get('userName').setValue(this.dataService.sharedData.userName);\n      this.registationForm.get('password').setValue(this.dataService.sharedData.password);\n      this.registationForm.get('email').setValue(this.dataService.sharedData.email);\n      this.registationForm.get('domainName').setValue(this.dataService.sharedData.domainName);\n    }\n  }\n\n  saveUser() {\n    if (this.userType) {\n      this.user.userName = this.registationForm.get('userName').value;\n      this.user.password = this.registationForm.get('password').value;\n      this.user.email = this.registationForm.get('email').value;\n      this.user.domainName = this.registationForm.get('domainName').value;\n      this.user.id = this.dataService.sharedData.id;\n      this.loginService.saveClient(this.user)\n        .subscribe((response: FormGroup) => {\n          if (response != null) {\n            this.router.navigate(['/dashboard']);\n          } else {\n            this.loginerror = true;\n          }\n        });\n    } else {\n      this.user.userName = this.registationForm.get('userName').value;\n      this.user.password = this.registationForm.get('password').value;\n      this.user.email = this.registationForm.get('email').value;\n      this.user.domainName = this.cookieService.get('domainName');\n      this.user.id = this.dataService.sharedData.id;\n      this.loginService.saveUser(this.user)\n        .subscribe((response: FormGroup) => {\n          if (response != null) {\n            this.router.navigate(['/dashboard']);\n          } else {\n            this.loginerror = true;\n          }\n        });\n    }\n    this.dataService.edit = false;\n    this.dataService.sharedData = '';\n  }\n\n  cancel() {\n    this.dataService.edit = false;\n    this.dataService.sharedData = '';\n    this.router.navigate(['/dashboard']);\n  }\n\n  logout() {\n    this.cookieService.deleteAll();\n    this.router.navigate(['/login']);\n  }\n}\n","<nav class=\"navbar navbar-expand navbar-light bg-light\" *ngIf=\"user\">\n  <div class=\"navbar-nav\">\n    <a class=\"nav-item nav-link\" routerLink=\"/dashboard\">\n      <img src=\"../../assets/images/logo.png\" alt=\"\">\n    </a>\n\n  </div>\n  <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n    <ul class=\"nav navbar-nav ml-auto\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-item nav-link ml-auto logout\" (click)=\"logout()\">Logout</a>\n      </li>\n\n    </ul>\n  </div>\n</nav>\n\n<div class=\"container\">\n  <form class=\"\" [formGroup]=\"registationForm\">\n    <div class=\"row\">\n      <div class=\"col-6 mb-3 input-group \">\n        <div class=\"input-group-prepend\">\n          <span class=\"input-group-text \" id=\"inputGroup-sizing-default\">User Name</span>\n        </div>\n        <input type=\"text\" class=\"form-control\" formControlName=\"userName\" aria-label=\"Sizing example input\"\n          aria-describedby=\"inputGroup-sizing-default\">\n      </div>\n      <div class=\"col-4\">\n        <div *ngIf=\" userName.invalid && (userName.dirty || userName.touched)\" class=\"alert alert-danger mt-1\">\n          <span *ngIf=\"userName.errors.required\">\n            Name is required.\n          </span>\n          <div *ngIf=\"userName.errors.minlength\">\n            Name must be at least 3 characters long.\n          </div>\n          <div *ngIf=\"userName.errors.maxlength\">\n            Name must be at least 20 characters long.\n          </div>\n          <!-- <div *ngIf=\"userName.errors.pattern\">\n            Name should not contains number.\n          </div> -->\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-6 mb-3 input-group\">\n        <div class=\"input-group-prepend\">\n          <span class=\"input-group-text\" id=\"inputGroup-sizing-default\"> Password </span>\n        </div>\n        <input type=\"password\" class=\"form-control\" formControlName=\"password\" aria-label=\"Sizing example input\"\n          aria-describedby=\"inputGroup-sizing-default\">\n      </div>\n      <div class=\"col-4\">\n        <div *ngIf=\" password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"password.errors.required\">\n            Password is required.\n          </div>\n          <div *ngIf=\"password.errors.minlength\">\n            Password must be at least 6 characters long.\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-6 mb-3 input-group\">\n        <div class=\"input-group-prepend\">\n          <span class=\"input-group-text\" id=\"inputGroup-sizing-default\"> Email </span>\n        </div>\n        <input type=\"text\" class=\"form-control\" formControlName=\"email\" aria-label=\"Sizing example input\"\n          aria-describedby=\"inputGroup-sizing-default\">\n      </div>\n      <div class=\"col-4\">\n        <div *ngIf=\" email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"email.errors.required\">\n            email is required.\n          </div>\n          <div *ngIf=\"email.errors.pattern\">\n            Email must be a valid email address\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\" *ngIf=\"userType\">\n      <div class=\"col-6 mb-3 input-group\">\n        <div class=\"input-group-prepend\">\n          <span class=\"input-group-text\" id=\"inputGroup-sizing-default\"> Domain Name </span>\n        </div>\n        <input type=\"text\" class=\"form-control\" formControlName=\"domainName\" aria-label=\"Sizing example input\"\n          aria-describedby=\"inputGroup-sizing-default\">\n      </div>\n      <div class=\"col-4\">\n        <div *ngIf=\" domainName.invalid && (domainName.dirty || domainName.touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"domainName.errors.required\">\n            DomainName is required.\n          </div>\n        </div>\n\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-3\">\n        <button type=\"button\" class=\"btn btn-dark btn-block\" [disabled]=\"registationForm.invalid\"\n          (click)=\"saveUser()\">submit</button>\n      </div>\n      <div class=\"col-3\">\n        <button type=\"button\" class=\"btn btn-dark btn-block\" (click)=\"cancel()\">cancel</button>\n      </div>\n    </div>\n  </form>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup } from '@angular/forms';\nimport { User } from './model/user.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  userSignIn(formgroup: FormGroup) {\n    return this.http.post('api/getByUserName', formgroup.value, httpOptions);\n  }\n\n  saveUser(user: User) {\n    return this.http.put('api/saveUser', user, httpOptions);\n  }\n\n  getUserListByClient(user: User) {\n    return this.http.post('api/userListByClient', user);\n  }\n\n  clientSignIn(formgroup: FormGroup) {\n    return this.http.post('client/getByUserName', formgroup.value, httpOptions);\n  }\n\n  getAllClientList() {\n    return this.http.get('client/getAllClientList', httpOptions);\n  }\n\n  saveClient(user: User) {\n    return this.http.put('client/saveClient', user, httpOptions);\n  }\n\n  deleteUser(userId: number) {\n    return this.http.delete('api/deleteUser/' + userId, httpOptions);\n  }\n\n  deleteClientUser(userId: number) {\n    return this.http.delete('client/deleteClient/' + userId, httpOptions);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:8080/api'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}